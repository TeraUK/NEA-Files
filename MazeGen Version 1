//oldest
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Reflection.Metadata;
using System.Runtime.Intrinsics.X86;

namespace Maze_test
{
    class Program
    {
        static void Main(string[] args)
        {
            MazeGen mazeGen = new MazeGen();

            mazeGen.Createarray();
            mazeGen.Algorithm();
            mazeGen.DrawArray();
            Console.WriteLine("number of squares visited = " + mazeGen.visited.Count);

       
        }
    }

    class MazeGen
    {

        int[] nextcell = new int[2];
        public Stack<int> stack = new Stack<int>(); //order of moves
        public Stack<int[]> movements = new Stack<int[]>();
        public Stack<int[]> moveList = new Stack<int[]>(); //chronoogical list of each cell that the maze gen moved into
        public List<int[]> visited = new List<int[]>(); //list of all the cells visited by the maze generator
        Random rnd = new Random();

        private int[] Currentpos = new int[2] { 1, 1 }; //the current position of the maze generator
        const int size = 37; //constant for Y axis size of grid
        const int size2 = ((size * 2) - 1); //constant for x axis size of grid

        //const int size2 = size;
        public int[,] Bitfield = new int[size2, size]; //contains the current maze form

        public int[] startingpos = new int[2] { 1, 1 };
        int[] temp = new int[2];
        
        public MazeGen()
        {            
            movements.Push(startingpos);
            visited.Add(startingpos);
        }
            
            
        public void Algorithm()
        {
            bool visitedloop = true;
            int checkresult = 1;
            getmovelist();
            while (visitedloop)
            {
                checkresult = Checkifvisited();

                if (checkresult == 2)
                {
                    visitedloop = false;
                    CreatePassage();
                    Algorithm();
                }
                else if (checkresult == 3)
                {
                    if (stack.Count != 0)
                    {
                        movements.Pop();
                        Currentpos = movements.Peek();
                        Algorithm();
                    }

                    visitedloop = false;
                   
                }
                else if (checkresult == 1)
                {
                    stack.Pop();
                }
            }

        }
        public void Createarray()
        {
            for (int y = 0; y < size; y++)
            {
                for (int x = 0; x < size2; x++)
                {
                    if (y == 0 || x == 0)
                    {
                        Bitfield[x, y] = 1;
                    }

                    if (y % 2 == 0 || x % 2 == 0)
                    {
                        Bitfield[x, y] = 1;
                    }
                    else
                    {
                        Bitfield[x, y] = 0;
                    }

                    if ((y == size - 1) || (x == size2 - 1))
                    {
                        Bitfield[x, y] = 1;
                    }
                }
            }
        }
        public void DrawArray()
        {
            for (int y = 0; y < size; y++)
            {
                for (int x = 0; x < size2; x++)
                {
                    Console.Write(Bitfield[x, y]);
                }
                Console.WriteLine("");
            }
        }
        int Checkifvisited()
        {
            if (stack.Count != 0)
            {
                

                nextcell[0] = GetNextCell()[0];
                nextcell[1] = GetNextCell()[1];

                int count = 0;
                foreach(var item in visited)
                {
                    if (visited[count][0] == nextcell[0])
                    {
                        if (visited[count][1] == nextcell[1])
                        {
                            
                            return 1;
                        }
                    }
                    
                    count++;
                }              
                if (nextcell[0] >= (size2 - 1))
                {
                    
                    return 1;
                }
                else if (nextcell[1] >= (size - 1))
                {
                   
                    return 1;
                }
                else if (nextcell[0] < 0)
                {
                    
                    return 1;
                }   
                else if (nextcell[1] < 0)
                {
                    
                    return 1;
                }
                else if (nextcell[0] == 0 || nextcell[1] == 0)
                {
                    
                    return 1;
                }
                else
                {
                    return 2;
                }

            }
            else
            {
                return 3;
            }

        }

        public void CreatePassage()
        {
            temp[0] = 0;
            temp[1] = 0;

            switch (stack.Peek())
            {
                case 1:
                    temp[0] = Currentpos[0];
                    temp[1] = Currentpos[1];
                    temp[1] += 1;
                    Bitfield[temp[0], temp[1]] = 0;
                    break;
                case 2:
                    temp[0] = Currentpos[0];
                    temp[1] = Currentpos[1];
                    temp[0] += 1;
                    Bitfield[temp[0], temp[1]] = 0;
                    break;
                case 3:
                    temp[0] = Currentpos[0];
                    temp[1] = Currentpos[1];
                    temp[1] -= 1;
                    Bitfield[temp[0], temp[1]] = 0;
                    break;
                case 4:
                    temp[0] = Currentpos[0];
                    temp[1] = Currentpos[1];
                    temp[0] -= 1;
                    Bitfield[temp[0], temp[1]] = 0;

                    break;
            }

            Currentpos[0] = GetNextCell()[0];
            Currentpos[1] = GetNextCell()[1];
            movements.Push(new int[2] { Currentpos[0], Currentpos[1] });          
            visited.Add(new int[2] { Currentpos[0], Currentpos[1] });

            Console.Clear();
            
            //DrawArray();

            //Console.WriteLine("number of squares visited = "+visited.Count);

            
        }

        public int[] GetNextCell()
        {


            temp[0] = 0;
            temp[1] = 0;


            switch (stack.Peek())
            {
                case 1:

                    temp[0] = Currentpos[0];
                    temp[1] = Currentpos[1];
                    //temp[1] += 2;
                    temp[1] = temp[1] + 2;

                    break;
                case 2:
                    temp[0] = Currentpos[0];
                    temp[1] = Currentpos[1];
                    // temp[0] += 2;
                    temp[0] = temp[0] + 2;

                    break;
                case 3:
                    temp[0] = Currentpos[0];
                    temp[1] = Currentpos[1];
                    //temp[1] -= 2;
                    temp[1] = temp[1] - 2;
                    
                    break;
                case 4:
                    temp[0] = Currentpos[0];
                    temp[1] = Currentpos[1];
                    //temp[0] -= 2;
                    temp[0] = temp[0] - 2;
                    break;
            }

            return temp;
        }

        public void getmovelist()
        {
            stack.Clear();

            bool go = true;

            for (int n = 0; n < 4; n++)
            {
                go = true;
                while (go)
                {
                    int number = rnd.Next(1, 5);
                    if (stack.Contains(number) == false)
                    {
                        stack.Push(number);
                        go = false;
                    }
                }
            }
        }
    }
}




